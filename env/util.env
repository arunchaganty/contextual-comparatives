#!/bin/bash
#

if [ -z ${__UTIL_ENV+x} ]; then # Header guard

MYDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

#
# Colored terminal output (these functions behave like `echo`).
#
color_red='\033[31;1m'
function red() {
  echo -e "${color_red}$@${color_clear}"
}
color_green='\033[32;1m'
function green() {
  echo -e "${color_green}$@${color_clear}" 
}
color_yellow='\033[33;1m'
function yellow() {
  echo -e "${color_yellow}$@${color_clear}" 
}
color_blue='\033[34;1m'
function blue() { 
  echo -e "${color_blue}$@${color_clear}" 
}
color_magenta='\033[35;1m'
function magenta() { 
  echo -e "${color_magenta}$@${color_clear}" 
}
color_cyan='\033[36;1m'
function cyan() { 
  echo -e "${color_cyan}$@${color_clear}" 
}
color_clear='\033[0m' # No Color

#
# A standard color scheme for various message types.
#
function msg() {
  cyan "$@"
}
function warn() {
  yellow "$@"
}
function err() {
  red "$@"
}
function dbg() {
  magenta "$@"
}

# The system's total memory
#export SYSTEM_MEMORY=`grep MemTotal /proc/meminfo | awk '{print int($2 / (1024 * 1024)) }'`
## The number of system cores (including hyperthreading)
#export SYSTEM_CORES=`nproc`
## The number of system cores without considering hyperthreading
#export SYSTEM_CORES_NO_HT=`echo "$SYSTEM_CORES" | awk '{ print int($1 / 2) }'`
## The system's memory allocatable to Java
#export JAVA_MEMORY=`grep MemTotal /proc/meminfo | awk '{print int($2 / (1024 * 1024 * 2)) }'`
#export JAVA_MEMORY_PER_CORE=`grep MemTotal /proc/meminfo | awk "{print int(\\$2 / (1024 * 1024 * 2 * $SYSTEM_CORES_NO_HT)) }"`

# A simple function to ensure that a given command exists in your path
function ensureCmd() {
  command -v $1 >/dev/null 2>&1 || {
    err >&2 "The program '$1' is not in your path (or not executable)! $2";
    return 1
  }
}

# Checks if a command runs on the remote host
# $1 : the host to check on
# $2 : the command to check
# $3 : the gloss of the resource being checked
# @see checkRemoteProgram
# @see checkRemoteDirectory
function checkRemote() {
  local HOST="$1"
  local CMD="$2"
  local GLOSS="$3"
  local STATUS=`ssh $HOST "$CMD" || true`
  if [ "$STATUS" == "ok" ]; then
    green "Found '$GLOSS' on $HOST"
    return 0
  elif [ "$STATUS" == "" ]; then
    warn "Could not find '$GLOSS' on $HOST"
    return 1
  else
    err "Could not ssh into $HOST"
    dbg "$ ssh $HOST '$CMD'"
    dbg "$STATUS"
    return 1
  fi
}

# Displays a confirmation dialog
# $1 The message to display.
#
# Usage:
#
# if [ confirm 'your message' ]; then
#   do_something
# fi
function confirm() {
  MSG="$1"
  read -p "$MSG (type 'yes' to continue): " confirmation
  if [ "$confirmation" == "yes" ]; then
    return 0
  else
    return 1
  fi
}

# Header guard
__UTIL_ENV="sourced"
fi
