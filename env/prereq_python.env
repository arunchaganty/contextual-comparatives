#!/bin/bash
#

if [ -z ${__PREREQ_PYTHON_ENV+x} ]; then # Header guard

# vzhong: gpadmin's usual ~/.bashrc sets PYTHONPATH and PYTHONHOME,
# which may mess up downstream python binaries when they look for their own libraries

MYDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source "$MYDIR/util.env"

# Try to find PyPy
export PYPY="pypy"
command -v "$PYPY" >/dev/null 2>&1 || {
  PYPY="/u/nlp/packages/pypy-2.3.1/bin/pypy"
}
command -v "$PYPY" >/dev/null 2>&1 || {
  warn "Could not find PyPy -- anything requiring PyPy will crash!"
  unset -v PYPY;
}

# Try to find Python 3
export PYTHON3="python3"
command -v "$PYTHON3" >/dev/null 2>&1 || {
  PYTHON3="/u/nlp/packages/python-3.2/bin/python3"
}
command -v "$PYTHON3" >/dev/null 2>&1 || {
  warn "Could not find Python 3 -- anything requiring Python 3 will crash!"
  unset -v PYTHON3;
}

# Try to find Python 2
export PYTHON2="python"
command -v "$PYTHON2" >/dev/null 2>&1 || {
  PYTHON2="/u/nlp/packages/python-2.7.8/bin/python2"
}
command -v "$PYTHON2" >/dev/null 2>&1 || {
  warn "Could not find Python 2 -- anything requiring Python 2 will crash!"
  unset -v PYTHON2;
}

# Find the right python
export PYTHON="python"
if [ ! -z ${PYPY+x} ]; then
  PYTHON="$PYPY"
elif [ ! -z ${PYTHON3+x} ]; then
  PYTHON="$PYTHON3"
elif [ ! -z ${PYTHON2+x} ]; then
  PYTHON="$PYTHON2"
fi

# Ensure that _some_ python exists
command -v "$PYTHON" >/dev/null 2>&1 || {
  err "Could not find any Python implementation!"
  exit 1
}

# Success
export PATH="$PATH:`dirname $PYTHON`"
dbg "Your default python is '$PYTHON'"


# Header guard
__PREREQ_PYTHON_ENV="sourced"
fi
